{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\iago.alves\\\\Desktop\\\\SnakeGame-TypeScript\\\\pages\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport Board from \"../components/Board\";\nimport React, { useEffect, useState } from \"react\";\nconst initialState = {\n  directionX: 1,\n  directionY: 0,\n  food: [5, 5],\n  size: {\n    x: 28,\n    y: 28\n  },\n  snake: [[2, 0], [1, 0], [0, 0]],\n  velocity: 5,\n  score: 2\n};\nconst direction = {\n  ArrowLeft: {\n    x: -1,\n    y: 0\n  },\n  ArrowRight: {\n    x: 1,\n    y: 0\n  },\n  ArrowUp: {\n    x: 0,\n    y: -1\n  },\n  ArrowDown: {\n    x: 0,\n    y: 1\n  }\n};\n\nconst App = () => {\n  _s();\n\n  const {\n    0: stateOptions,\n    1: setStateValues\n  } = useState(initialState);\n  const {\n    0: stateSnake,\n    1: setStateSnake\n  } = useState(initialState.snake);\n\n  function getBoard({\n    snake,\n    food\n  }) {\n    const board = [...Array(stateOptions.size.y)].map(() => {\n      return [...Array(stateOptions.size.x)].map(() => {\n        return \"NOT_SNAKE\";\n      });\n    });\n    board[stateOptions.food[0]][stateOptions.food[1]] = \"FOOD\";\n    stateSnake.forEach(coords => {\n      board[coords[1]][coords[0]] = \"SNAKE\";\n    });\n    return board;\n  }\n\n  const listenForKeyChanges = () => {\n    window.addEventListener(\"keydown\", event => {\n      const key = event.key;\n\n      switch (key) {\n        case \"ArrowDown\":\n          if (stateOptions.directionX != 0 && stateOptions.directionY != 1) {\n            setStateValues(state => {\n              state.directionX = 0;\n              state.directionY = 1;\n              return state;\n            });\n          }\n\n          break;\n\n        case \"ArrowUp\":\n          if (stateOptions.directionX != 0 && stateOptions.directionY != -1) {\n            setStateValues(state => {\n              state.directionX = 0;\n              state.directionY = -1;\n              return state;\n            });\n          }\n\n          break;\n\n        case \"ArrowRight\":\n          if (stateOptions.directionX != 1 && stateOptions.directionY != 0) {\n            setStateValues(state => {\n              state.directionX = 1;\n              state.directionY = 0;\n              return state;\n            });\n          }\n\n          break;\n\n        case \"ArrowLeft\":\n          if (stateOptions.directionX != -1 && stateOptions.directionY != 0) {\n            setStateValues(state => {\n              state.directionX = -1;\n              state.directionY = 0;\n              return state;\n            });\n          }\n\n          break;\n      }\n    });\n  };\n\n  function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  const generateFood = () => {\n    const randomX = getRandomInt(0, stateOptions.size.x);\n    const randomY = getRandomInt(0, stateOptions.size.y);\n    const board = getBoard(stateOptions);\n\n    if (board[randomY]) {\n      const foodState = board[randomY][randomX];\n\n      if (foodState === \"NOT_SNAKE\") {\n        setStateValues(state => {\n          state.food = [randomY, randomX];\n          return state;\n        });\n      } else {\n        return generateFood();\n      }\n    } else {\n      return generateFood();\n    }\n  };\n\n  const updateSpeed = () => {\n    var interval = stateOptions.velocity * 0.5;\n    setStateValues(state => {\n      clearInterval(state.velocity);\n      state.velocity = interval;\n      state.score++;\n      return state;\n    });\n  };\n\n  useEffect(() => {\n    listenForKeyChanges();\n    setTimeout(() => {\n      var currentHead = stateSnake[0];\n      var newHead = [currentHead[0] + stateOptions.directionX, currentHead[1] + stateOptions.directionY];\n\n      if (!board[newHead[1]]) {\n        alert(\"Fim de Jogo \\npontuação: \" + stateOptions.score / 2);\n        window.location.href = \"/\";\n      }\n\n      var newHeadState = board[newHead[1]][newHead[0]];\n\n      if (newHeadState == \"NOT_SNAKE\") {\n        setStateSnake(state => {\n          state = [newHead, ...stateSnake];\n          state.pop();\n          return state;\n        });\n      } else if (newHeadState == \"FOOD\") {\n        //glow snake\n        setStateSnake(state => {\n          state = [newHead, ...state];\n          return state;\n        }); //glow speed & score++\n\n        updateSpeed(); //gen new food\n\n        generateFood();\n      } else {\n        alert(\"Fim de Jogo \\npontuação: \" + stateOptions.score / 2);\n        window.location.href = \"/\";\n      }\n    }, stateOptions.velocity);\n  }, [stateSnake]);\n  let board = getBoard(stateOptions);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Board, {\n      boardelements: board,\n      score: stateOptions.score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 7\n  }, this);\n};\n\n_s(App, \"CJJZVoaDVlrb6AklBu52YtHBJCU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/iago.alves/Desktop/SnakeGame-TypeScript/pages/App.tsx"],"names":["Board","React","useEffect","useState","initialState","directionX","directionY","food","size","x","y","snake","velocity","score","direction","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","App","stateOptions","setStateValues","stateSnake","setStateSnake","getBoard","board","Array","map","forEach","coords","listenForKeyChanges","window","addEventListener","event","key","state","getRandomInt","min","max","Math","floor","random","generateFood","randomX","randomY","foodState","updateSpeed","interval","clearInterval","setTimeout","currentHead","newHead","alert","location","href","newHeadState","pop"],"mappings":"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","sourcesContent":["import Board from \"../components/Board\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\ninterface InitialState {\r\n  directionX: number;\r\n  directionY: number;\r\n  food: number[];\r\n  size: {\r\n    x: number;\r\n    y: number;\r\n  };\r\n  snake: number[][];\r\n  velocity: number;\r\n  score: number;\r\n}\r\nconst initialState: InitialState = {\r\n  directionX: 1,\r\n  directionY: 0,\r\n  food: [5, 5],\r\n  size: { x: 28, y: 28 },\r\n  snake: [[2, 0], [1, 0], [0, 0]],\r\n  velocity: 5,\r\n  score: 2,\r\n};\r\n\r\nconst direction: any = {\r\n  ArrowLeft: {\r\n    x: -1,\r\n    y: 0\r\n  },\r\n  ArrowRight: {\r\n    x: 1,\r\n    y: 0\r\n  },\r\n  ArrowUp: {\r\n    x: 0,\r\n    y: -1\r\n  },\r\n  ArrowDown: {\r\n    x: 0,\r\n    y: 1\r\n  }\r\n}\r\n\r\nconst App: React.FC = () => {\r\n  \r\n  const [stateOptions, setStateValues] = useState(initialState);\r\n  const [stateSnake, setStateSnake] = useState(initialState.snake);\r\n   \r\n  \r\n  function getBoard({ snake, food }: InitialState) {\r\n    const board = [...Array(stateOptions.size.y)].map(() => {\r\n      return [...Array(stateOptions.size.x)].map(() => {\r\n        return \"NOT_SNAKE\";\r\n      });\r\n    });\r\n    board[stateOptions.food[0]][stateOptions.food[1]] = \"FOOD\";\r\n\r\n    stateSnake.forEach(coords => {\r\n      board[coords[1]][coords[0]] = \"SNAKE\";\r\n    });\r\n    return board;\r\n  }\r\n\r\n  const listenForKeyChanges = () => {\r\n    window.addEventListener(\"keydown\", event => {\r\n      const key = event.key;\r\n      switch (key) {\r\n        case \"ArrowDown\":\r\n          if(stateOptions.directionX != 0 && stateOptions.directionY != 1){\r\n          setStateValues(state => {  \r\n            state.directionX = 0;\r\n            state.directionY = 1;\r\n            return state    \r\n          })\r\n        }\r\n        break;\r\n        case \"ArrowUp\":\r\n          if(stateOptions.directionX != 0 && stateOptions.directionY != -1){\r\n          setStateValues(state => {  \r\n            state.directionX = 0;\r\n            state.directionY = -1;\r\n            return state    \r\n          })\r\n        }\r\n        break;\r\n        case \"ArrowRight\":\r\n          if(stateOptions.directionX != 1 && stateOptions.directionY != 0){\r\n            setStateValues(state => {  \r\n              state.directionX = 1;\r\n              state.directionY = 0;\r\n              return state    \r\n            })\r\n          }\r\n        break;\r\n        case \"ArrowLeft\":\r\n          if(stateOptions.directionX != -1 && stateOptions.directionY != 0){\r\n          setStateValues(state => {  \r\n            state.directionX = -1;\r\n            state.directionY = 0;\r\n            return state    \r\n          })\r\n        }\r\n        break;        \r\n      }\r\n    });\r\n  };  \r\n\r\n  function getRandomInt(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n\r\n  const generateFood = ():any => {\r\n    const randomX = getRandomInt(0, stateOptions.size.x);\r\n    const randomY = getRandomInt(0, stateOptions.size.y);\r\n    const board = getBoard(stateOptions);\r\n\r\n    if(board[randomY]){\r\n      const foodState = board[randomY][randomX];\r\n      if (foodState === \"NOT_SNAKE\") {\r\n        setStateValues(state => {  \r\n          state.food = [randomY,randomX]\r\n          return state\r\n        })\r\n      }else{\r\n        return generateFood();\r\n      }\r\n    }\r\n    else{\r\n      return generateFood();\r\n    }\r\n  };\r\n\r\n  const updateSpeed = () => {\r\n    var interval = stateOptions.velocity * 0.5; \r\n\r\n    setStateValues(state => { \r\n      clearInterval(state.velocity);\r\n      state.velocity = interval;\r\n      state.score++;\r\n      return state    \r\n    })\r\n  };\r\n\r\n  useEffect(() => {\r\n    listenForKeyChanges();\r\n    setTimeout(() => {\r\n      var currentHead = stateSnake[0]\r\n      var newHead = [currentHead[0] + stateOptions.directionX, currentHead[1] + stateOptions.directionY];\r\n\r\n      if(!board[newHead[1]]){\r\n        alert(\"Fim de Jogo \\npontuação: \"+stateOptions.score/2); \r\n        window.location.href = \"/\"\r\n      }\r\n      var newHeadState = board[newHead[1]][newHead[0]];\r\n      if(newHeadState == \"NOT_SNAKE\"){\r\n        setStateSnake(state => {  \r\n          state = [newHead, ...stateSnake]; \r\n          state.pop();\r\n          return state    \r\n        })\r\n      }else \r\n      if(newHeadState == \"FOOD\"){\r\n        //glow snake\r\n        setStateSnake(state => {  \r\n          state = [newHead, ...state]; \r\n          return state    \r\n        })\r\n        //glow speed & score++\r\n        updateSpeed();\r\n        //gen new food\r\n        generateFood();       \r\n      }else{\r\n        alert(\"Fim de Jogo \\npontuação: \"+stateOptions.score/2); \r\n        window.location.href = \"/\"\r\n      }\r\n    }, stateOptions.velocity) \r\n  }, [stateSnake])\r\n  let board = getBoard(stateOptions);\r\n  \r\n    return (\r\n      <div>\r\n      <Board boardelements={board} score={stateOptions.score}>\r\n      </Board>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}